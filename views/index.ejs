<!DOCTYPE html>
<html lang="en">
<head>
	<meta http-equiv="content-type" content="text/html; charset=UTF-8">
	<meta charset="utf-8">
	<meta name="viewport" content="width=device-width, initial-scale=1, shrink-to-fit=no">
	<!--link rel="icon" href="https://getbootstrap.com/favicon.ico"-->

	<title>롯데정보통신 드론관제시스템</title>

	<!-- Bootstrap core CSS -->
	<link rel="stylesheet" href="https://stackpath.bootstrapcdn.com/bootstrap/4.1.3/css/bootstrap.min.css" integrity="sha384-MCw98/SFnGE8fJT3GXwEOngsV7Zt27NXFoaoApmYm81iuXoPkFOJwJ8ERdknLPMO" crossorigin="anonymous">

	<link rel="stylesheet" type="text/css" href="/style/video.css">
	<!--link rel="stylesheet" type="text/css" href="/style/default.css"-->
	<link rel="stylesheet" type="text/css" href="/style/accordion.css">

	<!-- Custom styles for this template -->
	<link href="/style/dashboard.css" rel="stylesheet">

	<!-- Vex -->
	<script src="/script/vex.combined.min.js"></script>
	<script>vex.defaultOptions.className = 'vex-theme-os'</script>
	<link rel="stylesheet" href="/style/vex.css" />
	<link rel="stylesheet" href="/style/vex-theme-os.css" />
</head>

<body>
	<nav class="navbar navbar-dark fixed-top bg-dark flex-md-nowrap p-0 shadow">
		<a class="navbar-brand col-sm-3 col-md-2 mr-0" href="#">LOTTE SMART DRONE VIEWER</a>
		<!--input class="form-control form-control-dark w-100" placeholder="Search" aria-label="Search" type="text"-->
		<ul class="navbar-nav px-3">
			<li class="nav-item text-nowrap">
				<a class="nav-link" href="#">사용자 이름</a>
			</li>
		</ul>
	</nav>

	<div class="container-fluid bg-dark">
		<div class="row">
			<nav class="col-md-2 d-none d-md-block bg-light sidebar">
				<div class="sidebar-sticky">
					<ul class="nav flex-column mb-2">
						<li class="nav-item">
							<!-- Drag n Drop https://developer.mozilla.org/en-US/docs/Web/API/HTML_Drag_and_Drop_API/Drag_operations#dragstart -->
							<button class="is-accordion">
								<!--svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
									<polygon points="23 7 16 12 23 17 23 7"/>
									<rect x="1" y="6" width="15" height="12" rx="2" ry="2"/>
								</svg-->
								카메라
								<!--a class="d-flex align-items-center text-muted" href="#">
									<svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="feather feather-plus-circle"><circle cx="12" cy="12" r="10"></circle><line x1="12" y1="8" x2="12" y2="16"></line><line x1="8" y1="12" x2="16" y2="12"></line></svg>
								</a-->
							</button>
							<div class="accordion-panel">
								<ul class="nav flex-column mb-2">
									<li class="nav-item">
										<a class="nav-link d-flex align-items-center text-muted" id="add-cam" href="#">
											추가하기
											<svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="feather feather-plus-circle"><circle cx="12" cy="12" r="10"></circle><line x1="12" y1="8" x2="12" y2="16"></line><line x1="8" y1="12" x2="16" y2="12"></line></svg>
										</a>
									</li>
									<li class="nav-item draggable-item-video" draggable="true">
										<a class="nav-link" href="#" value="http://localhost:3000/WhyDon'tYouKnow.mp4">
											<svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="feather feather-video"><path d="M14 2H6a2 2 0 0 0-2 2v16a2 2 0 0 0 2 2h12a2 2 0 0 0 2-2V8z"></path><polyline points="14 2 14 8 20 8"></polyline><line x1="16" y1="13" x2="8" y2="13"></line><line x1="16" y1="17" x2="8" y2="17"></line><polyline points="10 9 9 9 8 9"></polyline></svg>
											Why Don't You Know
										</a>
									</li>
									<li class="nav-item draggable-item-video" draggable="true">
										<a class="nav-link" href="#" value="http://localhost:3000/RollerCoaster.mp4">
											<svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="feather feather-video"><path d="M14 2H6a2 2 0 0 0-2 2v16a2 2 0 0 0 2 2h12a2 2 0 0 0 2-2V8z"></path><polyline points="14 2 14 8 20 8"></polyline><line x1="16" y1="13" x2="8" y2="13"></line><line x1="16" y1="17" x2="8" y2="17"></line><polyline points="10 9 9 9 8 9"></polyline></svg>
											Roller Coaster
										</a>
									</li>
									<li class="nav-item draggable-item-video" draggable="true">
										<a class="nav-link" href="#" value="http://localhost:3000/LoveU.mp4">
											<svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="feather feather-video"><path d="M14 2H6a2 2 0 0 0-2 2v16a2 2 0 0 0 2 2h12a2 2 0 0 0 2-2V8z"></path><polyline points="14 2 14 8 20 8"></polyline><line x1="16" y1="13" x2="8" y2="13"></line><line x1="16" y1="17" x2="8" y2="17"></line><polyline points="10 9 9 9 8 9"></polyline></svg>
											Love U
										</a>
									</li>
								</ul>
							</div>
							<button class="is-accordion">지도</button>
							<div class="accordion-panel">
								<p>Lorem ipsum...</p>
							</div>
							<button class="is-accordion">경로설정</button>
							<div class="accordion-panel">
								<p>Lorem ipsum...</p>
							</div>
							<button class="is-accordion">뷰어</button>
							<div class="accordion-panel">
								<p>Lorem ipsum...</p>
							</div>
							<button class="is-accordion">사용자</button>
							<div class="accordion-panel">
								<p>Lorem ipsum...</p>
							</div>
						</li>
					</ul>
				</div>
			</nav>
			<div>
				<main role="main" class="col-md-9 ml-sm-auto col-lg-10 px-4" id="main-container" style="margin-top: 4px;">
					<div class="uav-video"><video autoplay muted><source src="http://localhost:3000/RollerCoaster.mp4" type="video/mp4"></video></div>
					<div class="uav-video"><video autoplay muted><source src="http://localhost:3000/RollerCoaster.mp4" type="video/mp4"></video></div>
					<div class="uav-video"><video autoplay muted><source src="http://localhost:3000/RollerCoaster.mp4" type="video/mp4"></video></div>
					<div class="uav-map">
						<div id="map"></div>
					</div>
				</main>
			</div>
		</div>
	</div>

	<div class="row" style="background: #343A40; margin-top: 5px;">
		<div class="col-md-2"></div>
		<div class="col-md-8">
			<div class="col-md-4">
				<button class="btn btn-sm btn-normal btn-division" id="btn-division-2x2">2x2</button>
				<button class="btn btn-sm btn-normal btn-division" id="btn-division-3x3">3x3</button>
				<button class="btn btn-sm btn-normal btn-division" id="btn-division-4x4">4x4</button>
			</div>
		</div>
	</div>

	<!-- Bootstrap core JavaScript
	================================================== -->
	<!-- Placed at the end of the document so the pages load faster -->
	<script src="https://code.jquery.com/jquery-3.3.1.slim.min.js" integrity="sha384-q8i/X+965DzO0rT7abK41JStQIAqVgRVzpbzo5smXKp4YfRvH+8abtTE1Pi6jizo" crossorigin="anonymous"></script>
	<script src="https://cdnjs.cloudflare.com/ajax/libs/popper.js/1.14.3/umd/popper.min.js" integrity="sha384-ZMP7rVo3mIykV+2+9J3UJ46jBk0WLaUAdn689aCwoqbBJiSnjAK/l8WvCWPIPm49" crossorigin="anonymous"></script>
	<script src="https://stackpath.bootstrapcdn.com/bootstrap/4.1.3/js/bootstrap.min.js" integrity="sha384-ChfqqxuZUCnJSK3+MXmPNIyE6ZbWh2IMqE241rYiqJxyMiZ6OW/JmZQ5stwEULTy" crossorigin="anonymous"></script>

	<!-- Daum Kakao Map API -->
	<!-- TODO: Daum Kakao Map API KEY 요청하기 -->
	<script type="text/javascript" src="//dapi.kakao.com/v2/maps/sdk.js?appkey=339fc8af69d18e161455f9bd0e826127&libraries=drawing"></script>
	<script>
		var container = document.getElementById('map');
		var options = {
			center: new daum.maps.LatLng(33.450701, 126.570667),
			level: 3
		};
		var map = new daum.maps.Map(container, options);

		// container.style.height = document.getElementsByClassName('uav-video')[0].style.height;
		// map.relayout()

		var uavIcon = new daum.maps.MarkerImage('http://localhost:3000/img/leader.gif',
			new daum.maps.Size(32, 32),
			{
				offset: new daum.maps.Point(16, 16)
			}
		);
		var uav = new daum.maps.Marker({
			map: map,
			position: new daum.maps.LatLng(33.450701, 126.570667),
			title: 'UAV 1',
			image: uavIcon
		});

		var followerIcon = new daum.maps.MarkerImage('http://localhost:3000/img/follower.gif',
			new daum.maps.Size(32, 32)
		);
		var follower1 = new daum.maps.Marker({
			map: map,
			position: new daum.maps.LatLng(33.450501, 126.570217),
			title: 'UAV 2',
			image: followerIcon
		});
		var follower2 = new daum.maps.Marker({
			map: map,
			position: new daum.maps.LatLng(33.450501, 126.571117),
			title: 'UAV 3',
			image: followerIcon
		});

		const markers = [];
	</script>

	<!-- 드론 경로 -->
	<script type="text/javascript">
		var polyline = null;
		function drawPolyline() {
			if (polyline !== null) {
				polyline.setMap(null);
			}
			const linepath = markers.map(marker => marker.getPosition());
			linepath.splice(0, 0, uav.getPosition());
			polyline = new daum.maps.Polyline({
				path: linepath,
				strokeWeight: 5,
				strokeColor: '#FFAE00',
				strokeOpacity: 0.7,
				strokeStyle: 'solid'    // 'dash'
			});
			polyline.setMap(map);
		}

		var isMapClickable = false;
		function onMapClick(mouseEvent) {
			var latlng = mouseEvent.latLng;
			var marker = new daum.maps.Marker({
				position: latlng,
				draggable: true,
				clickable: true,
				map: map
			});
			markers.push(marker);

			// Draw Line
			drawPolyline();
			
			// Marker Drag-End Event
			daum.maps.event.addListener(marker, 'click', function() {
				// Update Layout
				const index = markers.indexOf(marker);
				/* build a DOM (createElement)
				const formNode = document.createElement("form");
				// padding not works => '10px'
				formNode.style.padding = 10;
				const divNode = document.createElement("div");
				divNode.className = "form-group";
				const labelNode = document.createElement("label");
				labelNode.setAttribute("for", "time-expected");
				labelNode.innerText = "이동 시간";
				const inputNode = document.createElement("input");
				inputNode.type = "number";
				inputNode.className = "form-control";
				inputNode.id = "time-expected";
				inputNode.setAttribute("aria-describedby", "timeHelp");
				inputNode.placeholder = "5";
				const smallNode = document.createElement("small");
				smallNode.id = "timeHelp";
				smallNode.className = "form-text text-muted";
				smallNode.innerText = "희망 시간을 입력하세요.(s)";
				divNode.appendChild(labelNode);
				divNode.appendChild(inputNode);
				divNode.appendChild(smallNode);
				const buttonNode = document.createElement("button");
				buttonNode.type = "button";
				buttonNode.className = "btn btn-sm btn-primary";
				buttonNode.innerText = "업데이트";
				formNode.appendChild(divNode);
				formNode.appendChild(buttonNode);
				*/
				const infoWindowContent = `
					<form style="padding: 10px;">
						<div class="form-group">
							<label for="time-expected">이동 시간</label>
							<input type="number" class="form-control" id="time-expected" aria-describedby="timeHelp" placeholder="5">
							<small id="timeHelp" class="form-text text-muted">희망 시간을 입력하세요.(s)</small>
						</div>
						<button type="button" class="btn btn-sm btn-primary">업데이트</button>
					</form>
				`;
				const infoWindow = new daum.maps.InfoWindow({
					content: infoWindowContent,	// formNode.outerHTML
					removable: true
				});
				infoWindow.open(map, marker);
			});
			daum.maps.event.addListener(marker, 'dragend', drawPolyline);
		}

		function calcAngle(from/*: daum.maps.LatLng*/, to/*: daum.maps.LatLng*/) {
			const angle = Math.atan2(from.getLng() - to.getLng(), from.getLat() - to.getLat());
			return (angle * (180 / Math.PI) + 180) % 360;
		}

		function updateUAVAngle(uav/*: daum.maps.Marker*/, angle) {
			// Rotate
			uav.md.style.transform = `rotate(${Math.round(angle)}deg)`;
		}

		// drone move test
		function moveTest() {

			// 잠시 경로 삭제
			if (polyline !== null) polyline.setMap(null);

			if (markers.length < 1) {
				vex.dialog.alert('1개 이상의 경유지가 필요합니다.');
				return;
			}

			let index = 0;
			const goalIndex = markers.length;

			const _upos = uav.getPosition();
			const startPosition = new daum.maps.LatLng(_upos.getLat(), _upos.getLng());

			const linepath = markers.map(marker => marker.getPosition());
			linepath.splice(0, 0, startPosition);

			let fpos = linepath[index];
			let tpos = linepath[index+1];

			fpos = new daum.maps.LatLng(fpos.getLat(), fpos.getLng());
			tpos = new daum.maps.LatLng(tpos.getLat(), tpos.getLng());

			updateUAVAngle(uav, calcAngle(fpos, tpos));

			let count = 0;
			let polylines = [];

			const movementInterval = setInterval(() => {

				count += 1;

				if (index == goalIndex) {
					vex.dialog.alert('Reached to goal!');
					clearInterval(movementInterval);

					if (polyline !== null) polyline.setMap(map);
				}
				const dx = (tpos.getLat() - fpos.getLat()) / 5;
				const dy = (tpos.getLng() - fpos.getLng()) / 5;

				let upos = uav.getPosition();
				uav.setPosition(new daum.maps.LatLng(upos.getLat() + dx, upos.getLng() + dy));

				// append: [].splice(index, 0, ELEMENT); (!!do not assign!!)
				// remove: [].splice(index, count);
				const linepath1 = linepath.slice(0, index+1);
				linepath1.splice(0, 0, startPosition);
				linepath1.push(uav.getPosition());
				const linepath2 = [uav.getPosition()].concat(linepath.slice(index+1));
				
				polylines.forEach(line => line.setMap(null));
				polylines = [
					new daum.maps.Polyline({
						path: linepath1,
						strokeWeight: 5,
						strokeColor: '#FFAE00',
						strokeOpacity: 0.7,
						strokeStyle: 'solid'
					}),
					new daum.maps.Polyline({
						path: linepath2,
						strokeWeight: 5,
						strokeColor: '#FFAE00',
						strokeOpacity: 0.7,
						strokeStyle: 'dash'
					})
				];
				polylines.forEach(line => line.setMap(map));
				// ==============================================================================================================================

				upos = uav.getPosition();
				if (count == 5) {
					count = 0;
				// if (upos.getLat() + Number.EPSILON == tpos.getLat()) {
					index += 1;
					fpos = tpos;
					// 도착했을 때 tpos가 존재하지 않아서 NullPointerException 발생
					if (index < goalIndex) tpos = linepath[index+1];

					updateUAVAngle(uav, calcAngle(fpos, tpos));

					/*
					uav.setMap(null);
					uav = new daum.maps.Marker({
						map: map,
						position: new daum.maps.LatLng(fpos.getLat(), fpos.getLng()),
						title: 'UAV 1',
						image: uavIcon
					});
					markers[0] = uav;
					*/
				}
			}, 1000);
		}
	</script>

	<script type="text/javascript">
		let uav_videos = document.getElementsByClassName('uav-video');
		function onVideoClick(index) {
			return function(e) {
				let url = e.target.childNodes[0].src;
				const magnified = document.createElement('div');
				const mvideo = document.createElement('video');
				mvideo.className = 'video-magnified';
				mvideo.autoplay = true;
				mvideo.muted = true;
				const videosource = document.createElement('source');
				videosource.type = 'video/mp4';
				videosource.src = url;
				mvideo.appendChild(videosource);
				magnified.appendChild(mvideo);
				document.getElementById('main-container').insertBefore(
					magnified,
					document.getElementById('main-container').firstChild
				);
				mvideo.load();

				// Removal
				magnified.addEventListener('click', function(e) {
					e.target.remove();
				});
			};
		}
		for (let i = 0; i < uav_videos.length; i++) {
			uav_videos[i].addEventListener('click', onVideoClick(i));
		}
	</script>

	<!-- SSH and ROS run -->
	<script type="text/javascript">
		const Client = require('ssh2').Client;
		document.getElementById('add-cam').addEventListener('click', function(e) {
			e.preventDefault();
			vex.dialog.open({
				message: '카메라의 IP 주소를 입력해주세요.',
				input: `
					<style>
						.input {
							margin: .4rem;
						}
					</style>
					
					<fieldset class="form-group">
						<div class="input">
							<div class="custom-control custom-radio custom-control-inline">
								<input type="text" name="address" placeholder="192.168.0.53" value="192.168.0.58">
							</div>
						</div>
					</fieldset>
				`,
				callback: value => {
					// alert(value);
					const { address } = value;
					console.log('address:', address);

					const conn = new Client();

					conn.on('ready', function() {
						console.log('Client::ready');
						conn.shell(function(err, stream) {
							if (err) throw err;
							stream.on('close', function() {
								console.log('Stream::close');
								conn.end();
							}).on('data', function(data) {
								console.log('STDOUT:', data.toString('utf-8'));
							}).stderr.on('data', function(data) {
								console.log('STDERR:', data.toString('utf-8'));
							});
							// TODO: ROS_MASTER_URI 수정
							stream.end(`export ROS_MASTER_URI=http://192.168.0.32:11311 && export ROS_IP=${address} && rosrun cv_camera cv_camera_node /cv_camera:=/cv1\nexit`);
						});
					}).connect({
						host: address,
						port: 22,
						username: 'usvcam1',
						password: '111111'
					});
				}
			});
		});
	</script>

	<!-- Menu -->
	<script type="text/javascript">
		const { remote } = require('electron');
		const { Menu } = remote;

		const template = [
			{
				label: '설정',
				submenu: [
					{
						label: '경로설정',
						accelerator: 'Ctrl+Shift+P',
						click: (item, focusedWindow) => {
							if (isMapClickable) daum.maps.event.removeListener(map, 'click', onMapClick);
							else daum.maps.event.addListener(map, 'click', onMapClick);
							isMapClickable = !isMapClickable;
						}
					},
					{
						label: '경로전달',
						accelerator: 'Ctrl+Shift+R',
						click: (item, focusedWindow) => {
							vex.dialog.confirm({
								message: '경로를 전달하시겠습니까?',
								callback: value => {
									if (value === false) return;
									/*
									const path = markers.map(marker => {
										const position = marker.getPosition();
										return {
											latitude: position.getLat(),
											longitude: position.getLng()
										};
									});
									*/
									moveTest();
								}
							});
						}
					},
					// TODO: debug/non release
					{
						label: '개발자도구',
						role: 'toggleDevTools'
					}
				]
			}
		];

		const menu = Menu.buildFromTemplate(template);

		Menu.setApplicationMenu(menu);
	</script>

	<!-- 드래그 앤 드랍으로 비디오 설정 -->
	<script type="text/javascript">
		function allowDrop(e) {
			e.preventDefault();
		}
		function drag(e) {
			e.dataTransfer.setData("src", e.target.getAttribute('value'));
		}
		function drop(e) {
			e.preventDefault();
			var url = e.dataTransfer.getData("src");
			e.target.childNodes[0].src = url;
			e.target.load();
			e.target.play();
		}
		let draggableItemVideo = document.getElementsByClassName('draggable-item-video');
		for (let i = 0; i < draggableItemVideo.length; i++) {
			draggableItemVideo[i].addEventListener('dragstart', drag);
		}
		for (let i = 0; i < uav_videos.length; i++) {
			uav_videos[i].addEventListener('drop', drop);
			uav_videos[i].addEventListener('dragover', allowDrop);
		}
	</script>

	<!-- 2/3/4분할 기능 -->
	<script type="text/javascript" src="/script/division.js"></script>

	<script type="text/javascript" src="/script/accordion.js"></script>

	<!-- Geolocation -->
	<script type="text/javascript">
		console.log('navigator.geolocation:', navigator.geolocation);
		if (navigator.geolocation) {
			navigator.geolocation.getCurrentPosition(position => {
				const lat = position.coords.latitude;
				const lon = position.coords.longitude;
				console.log(`lat: ${lat}, lon: ${lon}`);

				/* Move map to current location
				map.setCenter(
					new daum.maps.LatLng(lat, lon)
				);
				*/
			}, error => {
				console.log('error:', error);
			});
		} else {
			console.log('navigator.geolocation not found.');
		}
	</script>
</body>
</html>