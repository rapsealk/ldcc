<!DOCTYPE html>
<html>
	<head>
		<meta charset="UTF-8">
		<meta name="viewport" content="width=device-width, initial-scale=1, shrink-to-fit=no">

		<!-- Bootstrap -->
		<link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/bootstrap/4.0.0/css/bootstrap.min.css" integrity="sha384-Gn5384xqQ1aoWXA+058RXPxPg6fy4IWvTNh0E263XmFcJlSAwiGgFAW/dAiS6JXm" crossorigin="anonymous">

        <% if (size === '2x2') { %>
        <link rel="stylesheet" type="text/css" href="/style/default.css">
        <% } else if (size === '3x3') { %>
        <link rel="stylesheet" type="text/css" href="/style/default-3x3.css">
        <% } else if (size === '4x4') { %>
        <link rel="stylesheet" type="text/css" href="/style/default-4x4.css">
        <% } %>

		<!-- Vex -->
		<script src="/script/vex.combined.min.js"></script>
		<script>vex.defaultOptions.className = 'vex-theme-os'</script>
		<link rel="stylesheet" href="/style/vex.css" />
		<link rel="stylesheet" href="/style/vex-theme-os.css" />
	</head>
	<body>

		<img id="logo" src="/img/lotte_dc_ci.png">

		<div class="uav-video">
			<div class="uav-details">
				<div class="uav-tag">UAV 1</div>
				<div class="uav-angle">angle: 32 degree</div>
				<div class="uav-position">lat: 33.450501, lon: 126.570217, alt: 30km</div>
			</div>
			<!--video autoplay><-- autoplay/controls >
				<--source src="http://localhost:3000/WhyDon'tYouKnow.mp4" type="video/mp4">
				Your browser does not support the video tag.
			</video-->
			<img id="uav-video" src="" alt="UAV 01 not loaded properly.">
        </div>

        <!-- if (size === '2x2') { >
		<div class="uav-video">
			<div class="uav-details">
				<div class="uav-tag">UAV 2</div>
				<div class="uav-angle">angle: 32 degree</div>
				<div class="uav-position">lat: 33.450501, lon: 126.570217, alt: 30km</div>
			</div>
			<video autoplay muted>
				<source src="http://localhost:3000/RollerCoaster.mp4" type="video/mp4">
				Your browser does not support the video tag.
			</video>
		</div>
		<div class="uav-video">
			<div class="uav-details">
				<div class="uav-tag">UAV 3</div>
				<div class="uav-angle">angle: 32 degree</div>
				<div class="uav-position">lat: 33.450501, lon: 126.570217, alt: 30km</div>
			</div>
			<video autoplay muted>
				<source src="http://localhost:3000/LoveU.mp4" type="video/mp4">
				Your browser does not support the video tag.
			</video>
		</div>
		<div class="uav-map">
			<div class="uav-details">
				<div class="uav-tag" id="map-edit-tag" style="color: crimson;">Mode: 보기</div>
			</div>
			<div id="map"></div>
        </div>
        <-- } -->
        <% if (size === '3x3') { %>
        <% const count = (3 * 3) - 1; for (let i = 2; i <= count; i++) { %>
        <div class="uav-video">
            <div class="uav-details">
                <div class="uav-tag">UAV <%= i %></div>
                <div class="uav-angle">angle: 32 degree</div>
                <div class="uav-position">lat: 33.450501, lon: 126.570217, alt: 30km</div>
            </div>
            <video autoplay muted>
                <source src="http://localhost:3000/RollerCoaster.mp4" type="video/mp4">
                Your browser does not support the video tag.
            </video>
        </div>
        <% } %>
        <% } else if (size === '4x4') { %>
        <% const count = (4 * 4) - 1; for (let i = 2; i <= count; i++) { %>
        <div class="uav-video">
            <div class="uav-details">
                <div class="uav-tag">UAV <%= i %></div>
                <div class="uav-angle">angle: 32 degree</div>
                <div class="uav-position">lat: 33.450501, lon: 126.570217, alt: 30km</div>
            </div>
            <video autoplay muted>
                <source src="http://localhost:3000/RollerCoaster.mp4" type="video/mp4">
                Your browser does not support the video tag.
            </video>
        </div>
        <% } %>
        <% } %>
        <div class="uav-map">
            <div class="uav-details">
                <div class="uav-tag" id="map-edit-tag" style="color: crimson;">Mode: 보기</div>
            </div>
            <div id="map"></div>
        </div>

		<!-- remove jQuery -->
		<!--script src="https://code.jquery.com/jquery-3.3.1.slim.min.js" integrity="sha384-q8i/X+965DzO0rT7abK41JStQIAqVgRVzpbzo5smXKp4YfRvH+8abtTE1Pi6jizo" crossorigin="anonymous"></script-->

		<!-- Bootstrap -->
		<script src="https://code.jquery.com/jquery-3.2.1.slim.min.js" integrity="sha384-KJ3o2DKtIkvYIK3UENzmM7KCkRr/rE9/Qpg6aAZGJwFDMVNA/GpGFF93hXpG5KkN" crossorigin="anonymous"></script>
		<script src="https://cdnjs.cloudflare.com/ajax/libs/popper.js/1.12.9/umd/popper.min.js" integrity="sha384-ApNbgh9B+Y1QKtv3Rn7W3mgPxhU9K/ScQsAP7hUibX39j7fakFPskvXusvfa0b4Q" crossorigin="anonymous"></script>
		<script src="https://maxcdn.bootstrapcdn.com/bootstrap/4.0.0/js/bootstrap.min.js" integrity="sha384-JZR6Spejh4U02d8jOt6vLEHfe/JQGiRRSQQxSfFWpi1MquVdAyjUar5+76PVCmYl" crossorigin="anonymous"></script>

		<!-- Drone Setter -->
		<script type="text/javascript" src="/script/drone.setter.js"></script>

		<!-- Drone Update -->
		<script type="text/javascript" src="/script/drone.update.js"></script>

		<!-- Daum Kakao Map -->
		<!-- http://apis.map.daum.net/web/sample/drawingUndo/ -->
		<script type="text/javascript" src="//dapi.kakao.com/v2/maps/sdk.js?appkey=339fc8af69d18e161455f9bd0e826127&libraries=drawing"></script>
		<!--script type="text/javascript" src="/script/marker.tracker.js"></script-->
		<script>
			var container = document.getElementById('map');
			var options = {
				center: new daum.maps.LatLng(33.450701, 126.570667),
				level: 3
			};
			var map = new daum.maps.Map(container, options);

			var uavIcon = new daum.maps.MarkerImage('http://localhost:3000/img/leader.gif',
				new daum.maps.Size(32, 32),
				{
					offset: new daum.maps.Point(16, 16)
				}
			);
			var uav = new daum.maps.Marker({
				map: map,
				position: new daum.maps.LatLng(33.450701, 126.570667),
				title: 'UAV 1',
				image: uavIcon
			});

			var followerIcon = new daum.maps.MarkerImage('http://localhost:3000/img/follower.gif',
				new daum.maps.Size(32, 32)
			);
			var follower1 = new daum.maps.Marker({
				map: map,
				position: new daum.maps.LatLng(33.450501, 126.570217),
				title: 'UAV 2',
				image: followerIcon
			});
			var follower2 = new daum.maps.Marker({
				map: map,
				position: new daum.maps.LatLng(33.450501, 126.571117),
				title: 'UAV 3',
				image: followerIcon
			});

			/* Marker Tracker
			var follower2 = new TooltipMarker(new daum.maps.LatLng(33.450501, 126.571117), 'UAV 3');
			follower2.setMap(map);
			const tracker = [
				// new MarkerTracker(map, uav),
				// new MarkerTracker(map, follower1),
				new MarkerTracker(map, follower2)
			];
			tracker.forEach(it => it.run());
			*/

			const markers = [];
		</script>
		<!-- Menu -->
		<script type="text/javascript">
			const { remote } = require('electron');
			const { Menu } = remote;

			// Drawing Manager (http://apis.map.daum.net/web/sample/drawingUndo/)
			/*
			var managerOptions = {
				map: map,
				drawingMode: [daum.maps.Drawing.OverlayType.POLYLINE],
				//
				markerOptions: {
					draggable: true,
					removable: true
				},
				//
				polylineOptions: {
					strokeColor: '#39F',
					draggable: true,
					removable: false,
					editable: true
				}
			};
			var manager = new daum.maps.Drawing.DrawingManager(managerOptions);

			// 그리기 요소의 생성/수정/이동/삭제
			manager.addListener('state_changed', function() {

				alert(`state_changed { undoable: ${manager.undoable()}, redoable: ${manager.redoable()} }`);
				
				if (manager.undoable()) {
					// enable undo button
				} else {
					// disable undo button
				}

				if (manager.redoable()) {
					// enable redo button
				} else {
					// disable redo button
				}
			});
			*/

			var polyline = null;
			function drawPolyline() {
				if (polyline !== null) {
					polyline.setMap(null);
				}
				const linepath = markers.map(marker => marker.getPosition());
				linepath.splice(0, 0, uav.getPosition());
				polyline = new daum.maps.Polyline({
					path: linepath,
					strokeWeight: 5,
					strokeColor: '#FFAE00',
					strokeOpacity: 0.7,
					strokeStyle: 'solid'    // 'dash'
				});
				polyline.setMap(map);
			}

			var isMapClickable = false;
			function onMapClick(mouseEvent) {
				var latlng = mouseEvent.latLng;
				var marker = new daum.maps.Marker({
					position: latlng,
					draggable: true,
					clickable: true,
					map: map
				});
				markers.push(marker);

				// Draw Line
				drawPolyline();
				
				// Marker Drag-End Event
				daum.maps.event.addListener(marker, 'click', function() {
					// Update Layout
					const index = markers.indexOf(marker);
					/* build a DOM (createElement)
					const formNode = document.createElement("form");
					// padding not works => '10px'
					formNode.style.padding = 10;
					const divNode = document.createElement("div");
					divNode.className = "form-group";
					const labelNode = document.createElement("label");
					labelNode.setAttribute("for", "time-expected");
					labelNode.innerText = "이동 시간";
					const inputNode = document.createElement("input");
					inputNode.type = "number";
					inputNode.className = "form-control";
					inputNode.id = "time-expected";
					inputNode.setAttribute("aria-describedby", "timeHelp");
					inputNode.placeholder = "5";
					const smallNode = document.createElement("small");
					smallNode.id = "timeHelp";
					smallNode.className = "form-text text-muted";
					smallNode.innerText = "희망 시간을 입력하세요.(s)";
					divNode.appendChild(labelNode);
					divNode.appendChild(inputNode);
					divNode.appendChild(smallNode);
					const buttonNode = document.createElement("button");
					buttonNode.type = "button";
					buttonNode.className = "btn btn-sm btn-primary";
					buttonNode.innerText = "업데이트";
					formNode.appendChild(divNode);
					formNode.appendChild(buttonNode);
					*/
					const infoWindowContent = `
						<form style="padding: 10px;">
							<div class="form-group">
								<label for="time-expected">이동 시간</label>
								<input type="number" class="form-control" id="time-expected" aria-describedby="timeHelp" placeholder="5">
								<small id="timeHelp" class="form-text text-muted">희망 시간을 입력하세요.(s)</small>
							</div>
							<button type="button" class="btn btn-sm btn-primary">업데이트</button>
						</form>
					`;
					const infoWindow = new daum.maps.InfoWindow({
						content: infoWindowContent,	// formNode.outerHTML
						removable: true
					});
					infoWindow.open(map, marker);
				});
				daum.maps.event.addListener(marker, 'dragend', drawPolyline);
			}

			function calcAngle(from/*: daum.maps.LatLng*/, to/*: daum.maps.LatLng*/) {
				const angle = Math.atan2(from.getLng() - to.getLng(), from.getLat() - to.getLat());
				return (angle * (180 / Math.PI) + 180) % 360;
			}

			function updateUAVAngle(uav/*: daum.maps.Marker*/, angle) {
				// Rotate
				uav.md.style.transform = `rotate(${Math.round(angle)}deg)`;
			}

			// drone move test
			function moveTest() {

				// 잠시 경로 삭제
				if (polyline !== null) polyline.setMap(null);

				if (markers.length < 1) {
					vex.dialog.alert('1개 이상의 경유지가 필요합니다.');
					return;
				}

				let index = 0;
				const goalIndex = markers.length;

				const _upos = uav.getPosition();
				const startPosition = new daum.maps.LatLng(_upos.getLat(), _upos.getLng());

				const linepath = markers.map(marker => marker.getPosition());
				linepath.splice(0, 0, startPosition);

				let fpos = linepath[index];
				let tpos = linepath[index+1];

				fpos = new daum.maps.LatLng(fpos.getLat(), fpos.getLng());
				tpos = new daum.maps.LatLng(tpos.getLat(), tpos.getLng());

				updateUAVAngle(uav, calcAngle(fpos, tpos));

				let count = 0;
				let polylines = [];

				const movementInterval = setInterval(() => {

					count += 1;

					if (index == goalIndex) {
						vex.dialog.alert('Reached to goal!');
						clearInterval(movementInterval);

						if (polyline !== null) polyline.setMap(map);
					}
					const dx = (tpos.getLat() - fpos.getLat()) / 5;
					const dy = (tpos.getLng() - fpos.getLng()) / 5;

					let upos = uav.getPosition();
					uav.setPosition(new daum.maps.LatLng(upos.getLat() + dx, upos.getLng() + dy));

					// append: [].splice(index, 0, ELEMENT); (!!do not assign!!)
					// remove: [].splice(index, count);
					const linepath1 = linepath.slice(0, index+1);
					linepath1.splice(0, 0, startPosition);
					linepath1.push(uav.getPosition());
					const linepath2 = [uav.getPosition()].concat(linepath.slice(index+1));
					
					polylines.forEach(line => line.setMap(null));
					polylines = [
						new daum.maps.Polyline({
							path: linepath1,
							strokeWeight: 5,
							strokeColor: '#FFAE00',
							strokeOpacity: 0.7,
							strokeStyle: 'solid'
						}),
						new daum.maps.Polyline({
							path: linepath2,
							strokeWeight: 5,
							strokeColor: '#FFAE00',
							strokeOpacity: 0.7,
							strokeStyle: 'dash'
						})
					];
					polylines.forEach(line => line.setMap(map));
					// ==============================================================================================================================

					upos = uav.getPosition();
					if (count == 5) {
						count = 0;
					// if (upos.getLat() + Number.EPSILON == tpos.getLat()) {
						index += 1;
						fpos = tpos;
						if (index < goalIndex) tpos = linepath[index+1];

						updateUAVAngle(uav, calcAngle(fpos, tpos));

						/*
						uav.setMap(null);
						uav = new daum.maps.Marker({
							map: map,
							position: new daum.maps.LatLng(fpos.getLat(), fpos.getLng()),
							title: 'UAV 1',
							image: uavIcon
						});
						markers[0] = uav;
						*/
					}
				}, 1000);
			}

			const template = [
				{
					label: '설정',
					submenu: [
						{
							label: '경로설정',
							accelerator: 'Ctrl+Shift+P',
							click: (item, focusedWindow) => {
								if (isMapClickable) daum.maps.event.removeListener(map, 'click', onMapClick);
								else daum.maps.event.addListener(map, 'click', onMapClick);
								isMapClickable = !isMapClickable;
								document.getElementById('map-edit-tag').innerHTML = `Mode: ${isMapClickable ? '경로 설정' : '보기'}`;
							}
						},
						{
							label: '경로전달',
							accelerator: 'Ctrl+Shift+R',
							click: (item, focusedWindow) => {
								vex.dialog.confirm({
									message: '경로를 전달하시겠습니까?',
									callback: value => {
										if (value === false) return;
										/*
										const path = markers.map(marker => {
											const position = marker.getPosition();
											return {
												latitude: position.getLat(),
												longitude: position.getLng()
											};
										});
										*/
										moveTest();
										//console.log(path);
										//vex.dialog.alert(JSON.stringify(path));
										//console.log(path[0]);
									}
								});
							}
						},
						// TODO: debug/non release
						{
							label: '개발자도구',
							role: 'toggleDevTools'
						}
					]
				}
			];

			const menu = Menu.buildFromTemplate(template);

			Menu.setApplicationMenu(menu);

			// Geolocation
			/*
			console.log('navigator.geolocation:', navigator.geolocation);
			if (navigator.geolocation) {
				navigator.geolocation.getCurrentPosition(position => {
					const lat = position.coords.latitude;
					const lon = position.coords.longitude;
					console.log(`lat: ${lat}, lon: ${lon}`);

					// Move map to current location
					map.setCenter(
						new daum.maps.LatLng(lat, lon)
					);
				}, error => {
					console.log('error:', error);
				});
			} else {
				console.log('navigator.geolocation not found.');
			}
			*/
		</script>
	</body>
</html>